/*
jackal_n3_01_H10_noSlack : A fast customized optimization solver.

Copyright (C) 2013-2023 EMBOTECH AG [info@embotech.com]. All rights reserved.


This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v6.3.0 on Wednesday, October 25, 2023 at 1:36:42 PM */
#ifndef jackal_n3_01_H10_noSlack_H
#define jackal_n3_01_H10_noSlack_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H
#include <string.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double jackal_n3_01_H10_noSlack_float;
typedef double jackal_n3_01_H10_noSlack_ldl_s_float;
typedef double jackal_n3_01_H10_noSlack_ldl_r_float;
typedef double jackal_n3_01_H10_noSlack_callback_float;

typedef double jackal_n3_01_H10_noSlackinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_jackal_n3_01_H10_noSlack
#define MISRA_C_jackal_n3_01_H10_noSlack (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_jackal_n3_01_H10_noSlack
#define RESTRICT_CODE_jackal_n3_01_H10_noSlack (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_jackal_n3_01_H10_noSlack
#define SET_PRINTLEVEL_jackal_n3_01_H10_noSlack    (0)
#endif

/* timing */
#ifndef SET_TIMING_jackal_n3_01_H10_noSlack
#define SET_TIMING_jackal_n3_01_H10_noSlack    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_jackal_n3_01_H10_noSlack			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_jackal_n3_01_H10_noSlack		(jackal_n3_01_H10_noSlack_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_jackal_n3_01_H10_noSlack	(200) 

/* whether callback return values should be checked */
#define EXTFUNC_RETURN_jackal_n3_01_H10_noSlack (0)

/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_jackal_n3_01_H10_noSlack      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_jackal_n3_01_H10_noSlack (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_jackal_n3_01_H10_noSlack   (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_jackal_n3_01_H10_noSlack (3)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_jackal_n3_01_H10_noSlack  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_jackal_n3_01_H10_noSlack   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_jackal_n3_01_H10_noSlack  (-6)

/* invalid value (<= -100) returned by external function */
#define INVALIDFUNCEXIT_jackal_n3_01_H10_noSlack (-200)

/* bad value returned by external function */
#define BADFUNCEXIT_jackal_n3_01_H10_noSlack(status) (status > -100? status - 200 : INVALIDFUNCEXIT_jackal_n3_01_H10_noSlack)

/* no progress in method possible */
#define NOPROGRESS_jackal_n3_01_H10_noSlack   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_jackal_n3_01_H10_noSlack   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_jackal_n3_01_H10_noSlack   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_jackal_n3_01_H10_noSlack   (-12)

/* thread error */
#define THREAD_FAILURE_jackal_n3_01_H10_noSlack  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_jackal_n3_01_H10_noSlack  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_jackal_n3_01_H10_noSlack  (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_jackal_n3_01_H10_noSlack (-101)
/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_jackal_n3_01_H10_noSlack (-102)


/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)


/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct jackal_n3_01_H10_noSlack_mem jackal_n3_01_H10_noSlack_mem;
#ifdef __cplusplus
extern "C" {
#endif
/* MEMORY STRUCT --------------------------------------------------------*/
extern jackal_n3_01_H10_noSlack_mem * jackal_n3_01_H10_noSlack_external_mem(void * mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);
extern size_t jackal_n3_01_H10_noSlack_get_mem_size( void );
extern size_t jackal_n3_01_H10_noSlack_get_const_size( void );
#ifdef __cplusplus
}
#endif

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 100 */
    jackal_n3_01_H10_noSlack_float x0[100];

    /* vector of size 8 */
    jackal_n3_01_H10_noSlack_float xinit[8];

    /* vector of size 270 */
    jackal_n3_01_H10_noSlack_float all_parameters[270];


} jackal_n3_01_H10_noSlack_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x01[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x02[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x03[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x04[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x05[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x06[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x07[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x08[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x09[10];

    /* column vector of length 10 */
    jackal_n3_01_H10_noSlack_float x10[10];


} jackal_n3_01_H10_noSlack_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: number of iterations needed to optimality (branch-and-bound) */
    solver_int32_default it2opt;

    /* scalar: inf-norm of equality constraint residuals */
    jackal_n3_01_H10_noSlack_float res_eq;

    /* scalar: inf-norm of inequality constraint residuals */
    jackal_n3_01_H10_noSlack_float res_ineq;

    /* scalar: norm of stationarity condition */
    jackal_n3_01_H10_noSlack_float rsnorm;

    /* scalar: max of all complementarity violations */
    jackal_n3_01_H10_noSlack_float rcompnorm;

    /* scalar: primal objective */
    jackal_n3_01_H10_noSlack_float pobj;

    /* scalar: dual objective */
    jackal_n3_01_H10_noSlack_float dobj;

    /* scalar: duality gap := pobj - dobj */
    jackal_n3_01_H10_noSlack_float dgap;

    /* scalar: relative duality gap := |dgap / pobj | */
    jackal_n3_01_H10_noSlack_float rdgap;

    /* scalar: duality measure */
    jackal_n3_01_H10_noSlack_float mu;

    /* scalar: duality measure (after affine step) */
    jackal_n3_01_H10_noSlack_float mu_aff;

    /* scalar: centering parameter */
    jackal_n3_01_H10_noSlack_float sigma;

    /* scalar: number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;

    /* scalar: number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;

    /* scalar: step size (affine direction) */
    jackal_n3_01_H10_noSlack_float step_aff;

    /* scalar: step size (combined direction) */
    jackal_n3_01_H10_noSlack_float step_cc;

    /* scalar: total solve time */
    jackal_n3_01_H10_noSlack_float solvetime;

    /* scalar: time spent in function evaluations */
    jackal_n3_01_H10_noSlack_float fevalstime;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];




} jackal_n3_01_H10_noSlack_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Wednesday, October 25, 2023 1:36:43 PM */
/* User License expires on: (UTC) Thursday, February 19, 2026 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Thursday, February 19, 2026 10:00:00 PM (approx.) */
/* Solver Id: 66683623-e30e-4cc9-a43f-f23277df45ef */
/* Host Compiler Version: d76500f0 */
/* Target Compiler Version: unused */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef solver_int32_default (*jackal_n3_01_H10_noSlack_extfunc)(jackal_n3_01_H10_noSlack_float* x, jackal_n3_01_H10_noSlack_float* y, jackal_n3_01_H10_noSlack_float* lambda, jackal_n3_01_H10_noSlack_float* params, jackal_n3_01_H10_noSlack_float* pobj, jackal_n3_01_H10_noSlack_float* g, jackal_n3_01_H10_noSlack_float* c, jackal_n3_01_H10_noSlack_float* Jeq, jackal_n3_01_H10_noSlack_float* h, jackal_n3_01_H10_noSlack_float* Jineq, jackal_n3_01_H10_noSlack_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default jackal_n3_01_H10_noSlack_solve(jackal_n3_01_H10_noSlack_params *params, jackal_n3_01_H10_noSlack_output *output, jackal_n3_01_H10_noSlack_info *info, jackal_n3_01_H10_noSlack_mem *mem, FILE *fs, jackal_n3_01_H10_noSlack_extfunc evalextfunctions_jackal_n3_01_H10_noSlack);



/*Integrator declarations */
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const jackal_n3_01_H10_noSlack_callback_float** arg, jackal_n3_01_H10_noSlack_callback_float** res, solver_int32_default* iw, jackal_n3_01_H10_noSlack_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const jackal_n3_01_H10_noSlack_callback_float** arg, jackal_n3_01_H10_noSlack_callback_float** res, solver_int32_default* iw, jackal_n3_01_H10_noSlack_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const jackal_n3_01_H10_noSlack_callback_float** arg, jackal_n3_01_H10_noSlack_callback_float** res, solver_int32_default* iw, jackal_n3_01_H10_noSlack_callback_float* w, solver_int32_default mem );

void jackal_n3_01_H10_noSlack_rktwo_0(const jackal_n3_01_H10_noSlack_callback_float * const z, const jackal_n3_01_H10_noSlack_callback_float * const p, jackal_n3_01_H10_noSlack_float * const c, jackal_n3_01_H10_noSlack_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);









#ifdef __cplusplus
}
#endif

#endif
